from robocorp.tasks import task
from robocorp import browser
from RPA.HTTP import HTTP
import time
from RPA.Tables import Tables
from RPA.PDF import PDF
from RPA.FileSystem import FileSystem
import os
from PIL import Image
import io
import zipfile

@task
def order_robots_from_RobotSpareBin():
    browser.configure(slowmo=100)
    ouvrir_site_robot()
    fermer_modal_enervant()
    time.sleep(10)
    telecharger_fichier_csv()
    csv()
    zipper_les_pdfs()

def ouvrir_site_robot():
    browser.goto("https://robotsparebinindustries.com/#/robot-order")

def fermer_modal_enervant():
    """Ferme la fenêtre modale ennuyeuse si elle apparaît"""
    try:
        page = browser.page()
        page.click("text=OK")
    except Exception as e:
        print(f"Aucune modal trouvée ou erreur survenue : {e}")

def telecharger_fichier_csv():
    """Télécharge le fichier CSV depuis l'URL donnée"""
    http = HTTP()
    http.download(url="https://robotsparebinindustries.com/orders.csv", overwrite=True)

def csv():
    library = Tables()
    orders = library.read_table_from_csv("orders.csv")
    for row in orders:
        order_number = row['Order number']
        head = row['Head']
        body = row['Body']
        legs = row['Legs']
        address = row['Address']
        print(order_number)
        print(head)
        print(body)
        print(legs)
        print(address)
        remplir_et_envoyer_formulaire_vente(body, head, legs, address)
        
        path_to_pdf = store_receipt_as_pdf(order_number)
        
        print(f"PDF enregistré à : {path_to_pdf}")

def remplir_et_envoyer_formulaire_vente(body, head, legs, address):
    """Remplit les données de vente et clique sur le bouton 'Commander'"""
    page = browser.page()

    # Attendre que l'élément #head soit présent 
    try:
        page.wait_for_selector("#head", timeout=4000)  
        page.select_option("#head", head)
    except Exception as e:
        print(f"Erreur lors de la sélection de l'option de la tête : {e}")
        return

    try:
        page.click(f'//input[@type="radio" and @name="body" and @value="{body}"]')
        page.fill('input[placeholder="Enter the part number for the legs"]', legs)
        page.fill('input[placeholder="Shipping address"]', address)
        #time.sleep(20)  
        page.click("text=preview")
        time.sleep(5)
        page.click('button.btn.btn-primary')
        time.sleep(10)
        
        print("Formulaire soumis avec succès.")
    except Exception as e:
        print(f"Erreur lors de la soumission du formulaire : {e}")

def store_receipt_as_pdf(order_number):
    """Enregistre un PDF avec un nom de fichier unique basé sur le numéro de commande et inclut une capture d'écran"""
    pdf = PDF()
    fs = FileSystem()
    output_dir = os.path.join(os.getcwd(), "output", "receipts")
    os.makedirs(output_dir, exist_ok=True)  # Crée le répertoire s'il n'existe pas
    file_name = f"order_{order_number}.pdf"
    file_path = os.path.join(output_dir, file_name)
    
    # Capture d'écran de l'élément spécifique
    screenshot_path = os.path.join(output_dir, f"order_{order_number}_screenshot.png")
    page = browser.page()
    
    try:
        # Attendre que les éléments soient visibles
        page.wait_for_selector('#order-completion')
        page.wait_for_selector('#robot-preview-image')

        # Capture d'écran des éléments individuellement
        element1 = page.query_selector('#order-completion')
        element2 = page.query_selector('#robot-preview-image')

        if element1 and element2:
            # Capture d'écran des deux éléments
            screenshot_element1 = element1.screenshot()
            screenshot_element2 = element2.screenshot()

            # Charger les images capturées avec PIL
            image1 = Image.open(io.BytesIO(screenshot_element1))
            image2 = Image.open(io.BytesIO(screenshot_element2))

            # Créer une image composite
            width = max(image1.width, image2.width)
            height = image1.height + image2.height
            combined_image = Image.new('RGBA', (width, height))
            combined_image.paste(image1, (0, 0))
            combined_image.paste(image2, (0, image1.height))

            # Sauvegarder l'image combinée
            combined_image.save(screenshot_path)
        else:
            raise Exception("Les éléments 'order-completion' ou 'robot-preview-image' n'ont pas été trouvés.")
    except Exception as e:
        print(f"Erreur lors de la capture des éléments : {e}")
        # Capture d'écran de la page entière en cas d'erreur
        page.screenshot(path=screenshot_path)

    # Création du contenu PDF
    pdf_content = f"""
    <html>
    <body>
        <h1>Reçu pour la commande {order_number}</h1>
        <p>Contenu du reçu pour la commande {order_number}.</p>
        <img src="{screenshot_path}" alt="Capture d'écran de la commande">
    </body>
    </html>
    """
    pdf.html_to_pdf(pdf_content, file_path)
    return file_path

def zipper_les_pdfs():
    """Compresse tous les PDF dans un fichier ZIP"""
    output_dir = os.path.join(os.getcwd(), "output", "receipts")
    zip_file_path = os.path.join(os.getcwd(), "output", "receipts.zip")
    with zipfile.ZipFile(zip_file_path, 'w') as zipf:
        for root, dirs, files in os.walk(output_dir):
            for file in files:
                if file.endswith('.pdf'):
                    zipf.write(os.path.join(root, file), arcname=file)
    print(f"Tous les PDF ont été compressés dans {zip_file_path}")
